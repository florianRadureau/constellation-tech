[project]
name = "constellation-tech"
version = "1.0.0"
description = "Transform CVs into beautiful constellation visualizations with AI"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Florian RADUREAU"}
]
license = "MIT"
keywords = ["cv", "constellation", "visualization", "ai", "imagen", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core FastAPI
    "fastapi==0.115.0",
    "uvicorn[standard]==0.32.0",
    "starlette==0.38.6",
    "pydantic==2.9.0",
    "pydantic-settings==2.1.0",
    "python-multipart==0.0.12",

    # Google Cloud Platform
    "google-cloud-aiplatform==1.70.0",
    "google-cloud-storage==2.18.0",
    "google-auth==2.41.1",

    # Document Processing
    "pypdf==5.1.0",
    "python-docx==1.1.2",

    # Image Processing
    "pillow==10.4.0",
    "opencv-python==4.8.1.78",
    "numpy==1.26.4",  # Compatible with OpenCV (numpy 2.x not supported yet)

    # HTTP & Utils
    "httpx==0.26.0",
    "aiofiles==23.2.1",
    "python-dotenv==1.0.0",
    "requests==2.32.5",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest==7.4.3",
    "pytest-cov==4.1.0",

    # Code Quality
    "black==24.1.1",
    "pylint==3.0.3",
    "mypy==1.8.0",
    "isort==5.13.2",
    "bandit==1.7.6",

    # Pre-commit
    "pre-commit==3.6.0",

    # Type Stubs
    "types-requests==2.31.0.20240125",
]

[project.urls]
Homepage = "https://github.com/florianradureau/constellation-tech"
Repository = "https://github.com/florianradureau/constellation-tech"
Issues = "https://github.com/florianradureau/constellation-tech/issues"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_error_context = true
pretty = true

# Allow some flexibility for third-party libraries
[[tool.mypy.overrides]]
module = [
    "pypdf.*",
    "docx.*",
    "PIL.*",
    "google.cloud.*",
    "vertexai.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short -p no:warnings --cov=services --cov=utils --cov=models --cov-report=term-missing"
filterwarnings = [
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["services", "utils", "models", "routers", "middleware"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["services", "models", "routers", "utils", "exceptions"]
